{"version":3,"file":"api.js","sourceRoot":"","sources":["api.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAAsD;AACtD,wCAAqC;AAGrC,gDAA6C;AAArC,kCAAA,UAAU,CAAA;AAqFlB,IAAa,mBAAmB;IADhC;QAGY,8BAAyB,GAAG,IAAI,iBAAO,EAAgB,CAAC;QACxD,6BAAwB,GAAG,IAAI,iBAAO,EAAgB,CAAC;QAE/D,yBAAoB,GAAG,IAAI,CAAC,yBAAyB,CAAC,YAAY,EAAE,CAAC;QACrE,WAAM,GAAG,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAAE,CAAC;IAU1D,CAAC;IARG,qCAAO,GAAP,UAAQ,YAA0B;QAC9B,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,sCAAQ,GAAR;QACI,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;IACzC,CAAC;IACL,0BAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBY,mBAAmB;IAD/B,iBAAU,EAAE;GACA,mBAAmB,CAgB/B;AAhBY,kDAAmB;AA2BhC,IAAa,mBAAmB;IADhC;QAGY,oBAAe,GAAG,IAAI,iBAAO,EAAqB,CAAC;QACnD,mBAAc,GAAG,IAAI,iBAAO,EAAqB,CAAC;QAE1D,eAAU,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QACjD,cAAS,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IASnD,CAAC;IAPG,uCAAS,GAAT,UAAU,KAAwB;QAC9B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED,sCAAQ,GAAR,UAAS,KAAwB;QAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IACL,0BAAC;AAAD,CAAC,AAfD,IAeC;AAfY,mBAAmB;IAD/B,iBAAU,EAAE;GACA,mBAAmB,CAe/B;AAfY,kDAAmB","sourcesContent":["import {EventEmitter,Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\n\nexport {DomHandler} from '../dom/domhandler';\n\nexport interface SortMeta {\n    field: string;\n    order: number;\n}\n\nexport interface LazyLoadEvent {\n    first?: number;\n    rows?: number;\n    sortField?: string;\n    sortOrder?: number;\n    multiSortMeta?: SortMeta[];\n    filters?: {[s: string]: FilterMetadata;};\n    globalFilter?: any;\n}\n\nexport interface FilterMetadata {\n    value?: any;\n    matchMode?: string;\n}\n\nexport interface MenuItem {\n    label?: string;\n    icon?: string;\n    command?: (event?: any) => void;\n    url?: string;\n    routerLink?: any;\n    eventEmitter?: EventEmitter<any>;\n    items?: MenuItem[];\n    expanded?: boolean;\n    disabled?: boolean;\n    visible?: boolean;\n    target?: string;\n    routerLinkActiveOptions?: any;\n}\n\nexport interface Message {\n    severity?: string;\n    summary?: string;\n    detail?: string;\n    id?: any;\n}\n\nexport interface SelectItem {\n    label: string;\n    value: any;\n}\n\nexport interface TreeNodeÂ {\n    label?: string;\n    data?: any;\n    icon?: any;\n    expandedIcon?: any;\n    collapsedIcon?: any;\n    children?: TreeNode[];\n    leaf?: boolean;\n    expanded?: boolean;\n    type?: string;\n    parent?: TreeNode;\n    partialSelected?: boolean;\n    styleClass?: string;\n    draggable?: boolean;\n    droppable?: boolean;\n    selectable?: boolean;\n}\n\nexport interface Confirmation {\n    message: string;\n    key?: string;\n    icon?: string;\n    header?: string;\n    accept?: Function;\n    reject?: Function;\n    acceptVisible?: boolean;\n    rejectVisible?: boolean;\n    acceptEvent?: EventEmitter<any>;\n    rejectEvent?: EventEmitter<any>;\n}\n\nexport interface BlockableUI {\n    getBlockableElement(): HTMLElement;\n}\n\n@Injectable()\nexport class ConfirmationService {\n\n    private requireConfirmationSource = new Subject<Confirmation>();\n    private acceptConfirmationSource = new Subject<Confirmation>();\n\n    requireConfirmation$ = this.requireConfirmationSource.asObservable();\n    accept = this.acceptConfirmationSource.asObservable();\n\n    confirm(confirmation: Confirmation) {\n        this.requireConfirmationSource.next(confirmation);\n        return this;\n    }\n\n    onAccept() {\n        this.acceptConfirmationSource.next();\n    }\n}\n\nexport interface TreeNodeDragEvent {\n    tree?: any;\n    node?: TreeNode;\n    subNodes?: TreeNode[];\n    index?: number;\n    scope?: any;\n}\n\n@Injectable()\nexport class TreeDragDropService {\n    \n    private dragStartSource = new Subject<TreeNodeDragEvent>();\n    private dragStopSource = new Subject<TreeNodeDragEvent>();\n    \n    dragStart$ = this.dragStartSource.asObservable();\n    dragStop$ = this.dragStopSource.asObservable();\n    \n    startDrag(event: TreeNodeDragEvent) {\n        this.dragStartSource.next(event);\n    }\n    \n    stopDrag(event: TreeNodeDragEvent) {\n        this.dragStopSource.next(event);\n    }\n}"]}