{"version":3,"file":"animations-browser.umd.min.js","sources":["../../../../packages/animations/browser/src/render/noop_animation_engine.ts","../../../../packages/animations/browser/src/render/web_animations/web_animations_player.ts","../../../../packages/animations/browser/src/render/web_animations/web_animations_driver.ts","../../../../packages/animations/browser/src/animation_engine.ts","../../../../packages/animations/browser/src/dsl/animation_timeline_visitor.ts","../../../../packages/animations/browser/src/dsl/animation_transition_factory.ts","../../../../packages/animations/browser/src/dsl/animation_trigger.ts","../../../../packages/animations/browser/src/dsl/animation_validator_visitor.ts","../../../../packages/animations/browser/src/render/dom_animation_engine.ts","../../../../packages/animations/browser/src/dsl/animation.ts","../../../../packages/animations/browser/src/dsl/style_normalization/web_animations_style_normalizer.ts","../../../../packages/animations/browser/src/render/animation_driver.ts","../../../../packages/animations/browser/src/dsl/animation_transition_instruction.ts","../../../../packages/animations/browser/src/dsl/animation_dsl_visitor.ts","../../../../packages/animations/browser/src/dsl/animation_transition_expr.ts","../../../../packages/animations/browser/src/util.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent, AnimationMetadataType, AnimationPlayer, AnimationStateMetadata, AnimationTriggerMetadata, ɵStyleData} from '@angular/animations';\n\nimport {AnimationEngine} from '../animation_engine';\nimport {copyStyles, eraseStyles, normalizeStyles, setStyles} from '../util';\n\ninterface ListenerTuple {\n  eventPhase: string;\n  triggerName: string;\n  callback: (event: any) => any;\n  doRemove?: boolean;\n}\n\ninterface ChangeTuple {\n  element: any;\n  triggerName: string;\n  oldValue: string;\n  newValue: string;\n}\n\nconst /** @type {?} */ DEFAULT_STATE_VALUE = 'void';\nconst /** @type {?} */ DEFAULT_STATE_STYLES = '*';\nexport class NoopAnimationEngine extends AnimationEngine {\nprivate _listeners = new Map<any, ListenerTuple[]>();\nprivate _changes: ChangeTuple[] = [];\nprivate _flaggedRemovals = new Set<any>();\nprivate _onDoneFns: (() => any)[] = [];\nprivate _triggerStyles: {[triggerName: string]: {[stateName: string]: ɵStyleData}} =\n      Object.create(null);\n/**\n * @param {?} trigger\n * @param {?=} name\n * @return {?}\n */\nregisterTrigger(trigger: AnimationTriggerMetadata, name: string = null): void {\n    name = name || trigger.name;\n    if (this._triggerStyles[name]) {\n      return;\n    }\n    const /** @type {?} */ stateMap: {[stateName: string]: ɵStyleData} = {};\n    trigger.definitions.forEach(def => {\n      if (def.type === AnimationMetadataType.State) {\n        const /** @type {?} */ stateDef = /** @type {?} */(( def as AnimationStateMetadata));\n        stateMap[stateDef.name] = normalizeStyles(stateDef.styles.styles);\n      }\n    });\n    this._triggerStyles[name] = stateMap;\n  }\n/**\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonInsert(element: any, domFn: () => any): void { domFn(); }\n/**\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonRemove(element: any, domFn: () => any): void {\n    domFn();\n    if (element['nodeType'] == 1) {\n      this._flaggedRemovals.add(element);\n    }\n  }\n/**\n * @param {?} element\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nsetProperty(element: any, property: string, value: any): void {\n    const /** @type {?} */ storageProp = makeStorageProp(property);\n    const /** @type {?} */ oldValue = element[storageProp] || DEFAULT_STATE_VALUE;\n    this._changes.push( /** @type {?} */((<ChangeTuple>{element, oldValue, newValue: value, triggerName: property})));\n\n    const /** @type {?} */ triggerStateStyles = this._triggerStyles[property] || {};\n    const /** @type {?} */ fromStateStyles =\n        triggerStateStyles[oldValue] || triggerStateStyles[DEFAULT_STATE_STYLES];\n    if (fromStateStyles) {\n      eraseStyles(element, fromStateStyles);\n    }\n\n    element[storageProp] = value;\n    this._onDoneFns.push(() => {\n      const /** @type {?} */ toStateStyles = triggerStateStyles[value] || triggerStateStyles[DEFAULT_STATE_STYLES];\n      if (toStateStyles) {\n        setStyles(element, toStateStyles);\n      }\n    });\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} eventPhase\n * @param {?} callback\n * @return {?}\n */\nlisten(element: any, eventName: string, eventPhase: string, callback: (event: any) => any):\n      () => any {\n    let /** @type {?} */ listeners = this._listeners.get(element);\n    if (!listeners) {\n      this._listeners.set(element, listeners = []);\n    }\n\n    const /** @type {?} */ tuple = /** @type {?} */(( <ListenerTuple>{triggerName: eventName, eventPhase, callback}));\n    listeners.push(tuple);\n\n    return () => tuple.doRemove = true;\n  }\n/**\n * @return {?}\n */\nflush(): void {\n    const /** @type {?} */ onStartCallbacks: (() => any)[] = [];\n    const /** @type {?} */ onDoneCallbacks: (() => any)[] = [];\n/**\n * @param {?} listener\n * @param {?} data\n * @return {?}\n */\nfunction handleListener(listener: ListenerTuple, data: ChangeTuple) {\n      const /** @type {?} */ phase = listener.eventPhase;\n      const /** @type {?} */ event = makeAnimationEvent(\n          data.element, data.triggerName, data.oldValue, data.newValue, phase, 0);\n      if (phase == 'start') {\n        onStartCallbacks.push(() => listener.callback(event));\n      } else if (phase == 'done') {\n        onDoneCallbacks.push(() => listener.callback(event));\n      }\n    }\n\n    this._changes.forEach(change => {\n      const /** @type {?} */ element = change.element;\n      const /** @type {?} */ listeners = this._listeners.get(element);\n      if (listeners) {\n        listeners.forEach(listener => {\n          if (listener.triggerName == change.triggerName) {\n            handleListener(listener, change);\n          }\n        });\n      }\n    });\n\n    // upon removal ALL the animation triggers need to get fired\n    this._flaggedRemovals.forEach(element => {\n      const /** @type {?} */ listeners = this._listeners.get(element);\n      if (listeners) {\n        listeners.forEach(listener => {\n          const /** @type {?} */ triggerName = listener.triggerName;\n          const /** @type {?} */ storageProp = makeStorageProp(triggerName);\n          handleListener(listener, /** @type {?} */(( <ChangeTuple>{\n            element: element,\n            triggerName: triggerName,\n            oldValue: element[storageProp] || DEFAULT_STATE_VALUE,\n            newValue: DEFAULT_STATE_VALUE\n          })));\n        });\n      }\n    });\n\n    // remove all the listeners after everything is complete\n    Array.from(this._listeners.keys()).forEach(element => {\n      const /** @type {?} */ listenersToKeep = this._listeners.get(element).filter(l => !l.doRemove);\n      if (listenersToKeep.length) {\n        this._listeners.set(element, listenersToKeep);\n      } else {\n        this._listeners.delete(element);\n      }\n    });\n\n    onStartCallbacks.forEach(fn => fn());\n    onDoneCallbacks.forEach(fn => fn());\n    this._flaggedRemovals.clear();\n    this._changes = [];\n\n    this._onDoneFns.forEach(doneFn => doneFn());\n    this._onDoneFns = [];\n  }\n/**\n * @return {?}\n */\nget activePlayers(): AnimationPlayer[] { return []; }\n/**\n * @return {?}\n */\nget queuedPlayers(): AnimationPlayer[] { return []; }\n}\n\nfunction NoopAnimationEngine_tsickle_Closure_declarations() {\n/** @type {?} */\nNoopAnimationEngine.prototype._listeners;\n/** @type {?} */\nNoopAnimationEngine.prototype._changes;\n/** @type {?} */\nNoopAnimationEngine.prototype._flaggedRemovals;\n/** @type {?} */\nNoopAnimationEngine.prototype._onDoneFns;\n/** @type {?} */\nNoopAnimationEngine.prototype._triggerStyles;\n}\n\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} phaseName\n * @param {?} totalTime\n * @return {?}\n */\nfunction makeAnimationEvent(\n    element: any, triggerName: string, fromState: string, toState: string, phaseName: string,\n    totalTime: number): AnimationEvent {\n  return /** @type {?} */(( <AnimationEvent>{element, triggerName, fromState, toState, phaseName, totalTime}));\n}\n/**\n * @param {?} property\n * @return {?}\n */\nfunction makeStorageProp(property: string): string {\n  return '_@_' + property;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AUTO_STYLE, AnimationPlayer} from '@angular/animations';\nimport {DOMAnimation} from './dom_animation';\nexport class WebAnimationsPlayer implements AnimationPlayer {\nprivate _onDoneFns: Function[] = [];\nprivate _onStartFns: Function[] = [];\nprivate _onDestroyFns: Function[] = [];\nprivate _player: DOMAnimation;\nprivate _duration: number;\nprivate _delay: number;\nprivate _initialized = false;\nprivate _finished = false;\nprivate _started = false;\nprivate _destroyed = false;\nprivate _finalKeyframe: {[key: string]: string | number};\npublic time = 0;\npublic parentPlayer: AnimationPlayer = null;\npublic previousStyles: {[styleName: string]: string | number};\n/**\n * @param {?} element\n * @param {?} keyframes\n * @param {?} options\n * @param {?=} previousPlayers\n */\nconstructor(\npublic element: any,\npublic keyframes: {[key: string]: string | number}[],\npublic options: {[key: string]: string | number},\n      previousPlayers: WebAnimationsPlayer[] = []) {\n    this._duration = <number>options['duration'];\n    this._delay = <number>options['delay'] || 0;\n    this.time = this._duration + this._delay;\n\n    this.previousStyles = {};\n    previousPlayers.forEach(player => {\n      let styles = player._captureStyles();\n      Object.keys(styles).forEach(prop => this.previousStyles[prop] = styles[prop]);\n    });\n  }\n/**\n * @return {?}\n */\nprivate _onFinish() {\n    if (!this._finished) {\n      this._finished = true;\n      this._onDoneFns.forEach(fn => fn());\n      this._onDoneFns = [];\n    }\n  }\n/**\n * @return {?}\n */\ninit(): void {\n    if (this._initialized) return;\n    this._initialized = true;\n\n    const /** @type {?} */ keyframes = this.keyframes.map(styles => {\n      const /** @type {?} */ formattedKeyframe: {[key: string]: string | number} = {};\n      Object.keys(styles).forEach((prop, index) => {\n        let /** @type {?} */ value = styles[prop];\n        if (value == AUTO_STYLE) {\n          value = _computeStyle(this.element, prop);\n        }\n        if (value != undefined) {\n          formattedKeyframe[prop] = value;\n        }\n      });\n      return formattedKeyframe;\n    });\n\n    const /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);\n    if (previousStyleProps.length) {\n      let /** @type {?} */ startingKeyframe = keyframes[0];\n      let /** @type {?} */ missingStyleProps: string[] = [];\n      previousStyleProps.forEach(prop => {\n        if (!startingKeyframe.hasOwnProperty(prop)) {\n          missingStyleProps.push(prop);\n        }\n        startingKeyframe[prop] = this.previousStyles[prop];\n      });\n\n      if (missingStyleProps.length) {\n        const /** @type {?} */ self = this;\n        // tslint:disable-next-line\n        for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {\n          let /** @type {?} */ kf = keyframes[i];\n          missingStyleProps.forEach(function(prop) {\n            kf[prop] = _computeStyle(self.element, prop);\n          });\n        }\n      }\n    }\n\n    this._player = this._triggerWebAnimation(this.element, keyframes, this.options);\n    this._finalKeyframe =\n        keyframes.length ? _copyKeyframeStyles(keyframes[keyframes.length - 1]) : {};\n\n    // this is required so that the player doesn't start to animate right away\n    this._resetDomPlayerState();\n    this._player.addEventListener('finish', () => this._onFinish());\n  }\n/**\n * \\@internal\n * @param {?} element\n * @param {?} keyframes\n * @param {?} options\n * @return {?}\n */\n_triggerWebAnimation(element: any, keyframes: any[], options: any): DOMAnimation {\n    // jscompiler doesn't seem to know animate is a native property because it's not fully\n    // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]\n    return /** @type {?} */(( element['animate'](keyframes, options) as DOMAnimation));\n  }\n/**\n * @return {?}\n */\nget domPlayer() { return this._player; }\n/**\n * @param {?} fn\n * @return {?}\n */\nonStart(fn: () => void): void { this._onStartFns.push(fn); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonDone(fn: () => void): void { this._onDoneFns.push(fn); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonDestroy(fn: () => void): void { this._onDestroyFns.push(fn); }\n/**\n * @return {?}\n */\nplay(): void {\n    this.init();\n    if (!this.hasStarted()) {\n      this._onStartFns.forEach(fn => fn());\n      this._onStartFns = [];\n      this._started = true;\n    }\n    this._player.play();\n  }\n/**\n * @return {?}\n */\npause(): void {\n    this.init();\n    this._player.pause();\n  }\n/**\n * @return {?}\n */\nfinish(): void {\n    this.init();\n    this._onFinish();\n    this._player.finish();\n  }\n/**\n * @return {?}\n */\nreset(): void {\n    this._resetDomPlayerState();\n    this._destroyed = false;\n    this._finished = false;\n    this._started = false;\n  }\n/**\n * @return {?}\n */\nprivate _resetDomPlayerState() {\n    if (this._player) {\n      this._player.cancel();\n    }\n  }\n/**\n * @return {?}\n */\nrestart(): void {\n    this.reset();\n    this.play();\n  }\n/**\n * @return {?}\n */\nhasStarted(): boolean { return this._started; }\n/**\n * @return {?}\n */\ndestroy(): void {\n    if (!this._destroyed) {\n      this._resetDomPlayerState();\n      this._onFinish();\n      this._destroyed = true;\n      this._onDestroyFns.forEach(fn => fn());\n      this._onDestroyFns = [];\n    }\n  }\n/**\n * @param {?} p\n * @return {?}\n */\nsetPosition(p: number): void { this._player.currentTime = p * this.time; }\n/**\n * @return {?}\n */\ngetPosition(): number { return this._player.currentTime / this.time; }\n/**\n * @return {?}\n */\nprivate _captureStyles(): {[prop: string]: string | number} {\n    const /** @type {?} */ styles: {[key: string]: string | number} = {};\n    if (this.hasStarted()) {\n      Object.keys(this._finalKeyframe).forEach(prop => {\n        if (prop != 'offset') {\n          styles[prop] =\n              this._finished ? this._finalKeyframe[prop] : _computeStyle(this.element, prop);\n        }\n      });\n    }\n\n    return styles;\n  }\n}\n\nfunction WebAnimationsPlayer_tsickle_Closure_declarations() {\n/** @type {?} */\nWebAnimationsPlayer.prototype._onDoneFns;\n/** @type {?} */\nWebAnimationsPlayer.prototype._onStartFns;\n/** @type {?} */\nWebAnimationsPlayer.prototype._onDestroyFns;\n/** @type {?} */\nWebAnimationsPlayer.prototype._player;\n/** @type {?} */\nWebAnimationsPlayer.prototype._duration;\n/** @type {?} */\nWebAnimationsPlayer.prototype._delay;\n/** @type {?} */\nWebAnimationsPlayer.prototype._initialized;\n/** @type {?} */\nWebAnimationsPlayer.prototype._finished;\n/** @type {?} */\nWebAnimationsPlayer.prototype._started;\n/** @type {?} */\nWebAnimationsPlayer.prototype._destroyed;\n/** @type {?} */\nWebAnimationsPlayer.prototype._finalKeyframe;\n/** @type {?} */\nWebAnimationsPlayer.prototype.time;\n/** @type {?} */\nWebAnimationsPlayer.prototype.parentPlayer;\n/** @type {?} */\nWebAnimationsPlayer.prototype.previousStyles;\n/** @type {?} */\nWebAnimationsPlayer.prototype.element;\n/** @type {?} */\nWebAnimationsPlayer.prototype.keyframes;\n/** @type {?} */\nWebAnimationsPlayer.prototype.options;\n}\n\n/**\n * @param {?} element\n * @param {?} prop\n * @return {?}\n */\nfunction _computeStyle(element: any, prop: string): string {\n  return ( /** @type {?} */((<any>window.getComputedStyle(element))))[prop];\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction _copyKeyframeStyles(styles: {[style: string]: string | number}):\n    {[style: string]: string | number} {\n  const /** @type {?} */ newStyles: {[style: string]: string | number} = {};\n  Object.keys(styles).forEach(prop => {\n    if (prop != 'offset') {\n      newStyles[prop] = styles[prop];\n    }\n  });\n  return newStyles;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationPlayer, ɵStyleData} from '@angular/animations';\n\nimport {AnimationDriver} from '../animation_driver';\n\nimport {WebAnimationsPlayer} from './web_animations_player';\nexport class WebAnimationsDriver implements AnimationDriver {\n/**\n * @param {?} element\n * @param {?} keyframes\n * @param {?} duration\n * @param {?} delay\n * @param {?} easing\n * @param {?=} previousPlayers\n * @return {?}\n */\nanimate(\n      element: any, keyframes: ɵStyleData[], duration: number, delay: number, easing: string,\n      previousPlayers: AnimationPlayer[] = []): WebAnimationsPlayer {\n    const /** @type {?} */ playerOptions: {[key: string]: string |\n                              number} = {'duration': duration, 'delay': delay, 'fill': 'forwards'};\n\n    // we check for this to avoid having a null|undefined value be present\n    // for the easing (which results in an error for certain browsers #9752)\n    if (easing) {\n      playerOptions['easing'] = easing;\n    }\n\n    const /** @type {?} */ previousWebAnimationPlayers = /** @type {?} */(( <WebAnimationsPlayer[]>previousPlayers.filter(\n        player => { return player instanceof WebAnimationsPlayer; })));\n    return new WebAnimationsPlayer(element, keyframes, playerOptions, previousWebAnimationPlayers);\n  }\n}\n/**\n * @return {?}\n */\nexport function supportsWebAnimations() {\n  return typeof Element !== 'undefined' && typeof( /** @type {?} */((<any>Element))).prototype['animate'] === 'function';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationPlayer, AnimationTriggerMetadata} from '@angular/animations';\n/**\n * @abstract\n */\nexport abstract class AnimationEngine {\n/**\n * @abstract\n * @param {?} trigger\n * @param {?=} name\n * @return {?}\n */\nregisterTrigger(trigger: AnimationTriggerMetadata, name?: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonInsert(element: any, domFn: () => any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonRemove(element: any, domFn: () => any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nsetProperty(element: any, property: string, value: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} eventName\n * @param {?} eventPhase\n * @param {?} callback\n * @return {?}\n */\nlisten(\n      element: any, eventName: string, eventPhase: string,\n      callback: (event: any) => any) {}\n/**\n * @abstract\n * @return {?}\n */\nflush() {}\n/**\n * @return {?}\n */\nget activePlayers(): AnimationPlayer[] { throw new Error('...'); }\n/**\n * @return {?}\n */\nget queuedPlayers(): AnimationPlayer[] { throw new Error('...'); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AUTO_STYLE, AnimateTimings, AnimationAnimateMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationMetadataType, AnimationSequenceMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, sequence, style, ɵStyleData} from '@angular/animations';\n\nimport {copyStyles, normalizeStyles, parseTimeExpression} from '../util';\n\nimport {AnimationDslVisitor, visitAnimationNode} from './animation_dsl_visitor';\nimport {AnimationTimelineInstruction, createTimelineInstruction} from './animation_timeline_instruction';\n/**\n * @param {?} ast\n * @param {?=} startingStyles\n * @param {?=} finalStyles\n * @return {?}\n */\nexport function buildAnimationKeyframes(\n    ast: AnimationMetadata | AnimationMetadata[], startingStyles: ɵStyleData = {},\n    finalStyles: ɵStyleData = {}): AnimationTimelineInstruction[] {\n  const /** @type {?} */ normalizedAst =\n      Array.isArray(ast) ? sequence( /** @type {?} */((<AnimationMetadata[]>ast))) : /** @type {?} */(( <AnimationMetadata>ast));\n  return new AnimationTimelineVisitor().buildKeyframes(normalizedAst, startingStyles, finalStyles);\n}\n\nexport declare type StyleAtTime = {\n  time: number; value: string | number;\n};\nexport class AnimationTimelineContext {\n  currentTimeline: TimelineBuilder;\n  currentAnimateTimings: AnimateTimings;\n  previousNode: AnimationMetadata = /** @type {?} */(( <AnimationMetadata>{}));\n  subContextCount = 0;\n/**\n * @param {?} errors\n * @param {?} timelines\n * @param {?=} initialTimeline\n */\nconstructor(\npublic errors: any[],\npublic timelines: TimelineBuilder[],\n      initialTimeline: TimelineBuilder = null) {\n    this.currentTimeline = initialTimeline || new TimelineBuilder(0);\n    timelines.push(this.currentTimeline);\n  }\n/**\n * @return {?}\n */\ncreateSubContext(): AnimationTimelineContext {\n    const /** @type {?} */ context =\n        new AnimationTimelineContext(this.errors, this.timelines, this.currentTimeline.fork());\n    context.previousNode = this.previousNode;\n    context.currentAnimateTimings = this.currentAnimateTimings;\n    this.subContextCount++;\n    return context;\n  }\n/**\n * @param {?=} newTime\n * @return {?}\n */\ntransformIntoNewTimeline(newTime = 0) {\n    this.currentTimeline = this.currentTimeline.fork(newTime);\n    this.timelines.push(this.currentTimeline);\n    return this.currentTimeline;\n  }\n/**\n * @param {?} time\n * @return {?}\n */\nincrementTime(time: number) {\n    this.currentTimeline.forwardTime(this.currentTimeline.duration + time);\n  }\n}\n\nfunction AnimationTimelineContext_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTimelineContext.prototype.currentTimeline;\n/** @type {?} */\nAnimationTimelineContext.prototype.currentAnimateTimings;\n/** @type {?} */\nAnimationTimelineContext.prototype.previousNode;\n/** @type {?} */\nAnimationTimelineContext.prototype.subContextCount;\n/** @type {?} */\nAnimationTimelineContext.prototype.errors;\n/** @type {?} */\nAnimationTimelineContext.prototype.timelines;\n}\n\nexport class AnimationTimelineVisitor implements AnimationDslVisitor {\n/**\n * @param {?} ast\n * @param {?} startingStyles\n * @param {?} finalStyles\n * @return {?}\n */\nbuildKeyframes(ast: AnimationMetadata, startingStyles: ɵStyleData, finalStyles: ɵStyleData):\n      AnimationTimelineInstruction[] {\n    const /** @type {?} */ context = new AnimationTimelineContext([], []);\n    context.currentTimeline.setStyles(startingStyles);\n\n    visitAnimationNode(this, ast, context);\n\n    // this checks to see if an actual animation happened\n    const /** @type {?} */ timelines = context.timelines.filter(timeline => timeline.hasStyling());\n    if (timelines.length && Object.keys(finalStyles).length) {\n      const /** @type {?} */ tl = timelines[timelines.length - 1];\n      if (!tl.allowOnlyTimelineStyles()) {\n        tl.setStyles(finalStyles);\n      }\n    }\n\n    return timelines.length ? timelines.map(timeline => timeline.buildKeyframes()) :\n                              [createTimelineInstruction([], 0, 0, '')];\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitState(ast: AnimationStateMetadata, context: any): any {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitTransition(ast: AnimationTransitionMetadata, context: any): any {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSequence(ast: AnimationSequenceMetadata, context: AnimationTimelineContext) {\n    const /** @type {?} */ subContextCount = context.subContextCount;\n    if (context.previousNode.type == AnimationMetadataType.Style) {\n      context.currentTimeline.forwardFrame();\n      context.currentTimeline.snapshotCurrentStyles();\n    }\n\n    ast.steps.forEach(s => visitAnimationNode(this, s, context));\n\n    // this means that some animation function within the sequence\n    // ended up creating a sub timeline (which means the current\n    // timeline cannot overlap with the contents of the sequence)\n    if (context.subContextCount > subContextCount) {\n      context.transformIntoNewTimeline();\n    }\n\n    context.previousNode = ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitGroup(ast: AnimationGroupMetadata, context: AnimationTimelineContext) {\n    const /** @type {?} */ innerTimelines: TimelineBuilder[] = [];\n    let /** @type {?} */ furthestTime = context.currentTimeline.currentTime;\n    ast.steps.forEach(s => {\n      const /** @type {?} */ innerContext = context.createSubContext();\n      visitAnimationNode(this, s, innerContext);\n      furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);\n      innerTimelines.push(innerContext.currentTimeline);\n    });\n\n    // this operation is run after the AST loop because otherwise\n    // if the parent timeline's collected styles were updated then\n    // it would pass in invalid data into the new-to-be forked items\n    innerTimelines.forEach(\n        timeline => context.currentTimeline.mergeTimelineCollectedStyles(timeline));\n    context.transformIntoNewTimeline(furthestTime);\n    context.previousNode = ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitAnimate(ast: AnimationAnimateMetadata, context: AnimationTimelineContext) {\n    const /** @type {?} */ timings = ast.timings.hasOwnProperty('duration') ? /** @type {?} */((\n        <AnimateTimings>ast.timings)) :\n        parseTimeExpression( /** @type {?} */((<string|number>ast.timings)), context.errors);\n    context.currentAnimateTimings = timings;\n\n    if (timings.delay) {\n      context.incrementTime(timings.delay);\n      context.currentTimeline.snapshotCurrentStyles();\n    }\n\n    const /** @type {?} */ astType = ast.styles ? ast.styles.type : -1;\n    if (astType == AnimationMetadataType.KeyframeSequence) {\n      this.visitKeyframeSequence( /** @type {?} */((<AnimationKeyframesSequenceMetadata>ast.styles)), context);\n    } else {\n      let /** @type {?} */ styleAst = /** @type {?} */(( ast.styles as AnimationStyleMetadata));\n      if (!styleAst) {\n        const /** @type {?} */ newStyleData: {[prop: string]: string | number} = {};\n        if (timings.easing) {\n          newStyleData['easing'] = timings.easing;\n        }\n        styleAst = style(newStyleData);\n        ( /** @type {?} */((styleAst as any)))['treatAsEmptyStep'] = true;\n      }\n      context.incrementTime(timings.duration);\n      if (styleAst) {\n        this.visitStyle(styleAst, context);\n      }\n    }\n\n    context.currentAnimateTimings = null;\n    context.previousNode = ast;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitStyle(ast: AnimationStyleMetadata, context: AnimationTimelineContext) {\n    // this is a special case when a style() call is issued directly after\n    // a call to animate(). If the clock is not forwarded by one frame then\n    // the style() calls will be merged into the previous animate() call\n    // which is incorrect.\n    if (!context.currentAnimateTimings &&\n        context.previousNode.type == AnimationMetadataType.Animate) {\n      context.currentTimeline.forwardFrame();\n    }\n\n    const /** @type {?} */ normalizedStyles = normalizeStyles(ast.styles);\n    const /** @type {?} */ easing = context.currentAnimateTimings && context.currentAnimateTimings.easing;\n    this._applyStyles(\n        normalizedStyles, easing, ( /** @type {?} */((ast as any)))['treatAsEmptyStep'] ? true : false, context);\n    context.previousNode = ast;\n  }\n/**\n * @param {?} styles\n * @param {?} easing\n * @param {?} treatAsEmptyStep\n * @param {?} context\n * @return {?}\n */\nprivate _applyStyles(\n      styles: ɵStyleData, easing: string, treatAsEmptyStep: boolean,\n      context: AnimationTimelineContext) {\n    if (styles.hasOwnProperty('easing')) {\n      easing = easing || /** @type {?} */(( styles['easing'] as string));\n      delete styles['easing'];\n    }\n    context.currentTimeline.setStyles(styles, easing, treatAsEmptyStep);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyframeSequence(\n      ast: AnimationKeyframesSequenceMetadata, context: AnimationTimelineContext) {\n    const /** @type {?} */ MAX_KEYFRAME_OFFSET = 1;\n    const /** @type {?} */ limit = ast.steps.length - 1;\n    const /** @type {?} */ firstKeyframe = ast.steps[0];\n\n    let /** @type {?} */ offsetGap = 0;\n    const /** @type {?} */ containsOffsets = getOffset(firstKeyframe) != null;\n    if (!containsOffsets) {\n      offsetGap = MAX_KEYFRAME_OFFSET / limit;\n    }\n\n    const /** @type {?} */ startTime = context.currentTimeline.duration;\n    const /** @type {?} */ duration = context.currentAnimateTimings.duration;\n    const /** @type {?} */ innerContext = context.createSubContext();\n    const /** @type {?} */ innerTimeline = innerContext.currentTimeline;\n    innerTimeline.easing = context.currentAnimateTimings.easing;\n\n    ast.steps.forEach((step: AnimationStyleMetadata, i: number) => {\n      const /** @type {?} */ normalizedStyles = normalizeStyles(step.styles);\n      const /** @type {?} */ offset = containsOffsets ?\n          (step.offset != null ? step.offset : parseFloat( /** @type {?} */((normalizedStyles['offset'] as string)))) :\n          (i == limit ? MAX_KEYFRAME_OFFSET : i * offsetGap);\n      innerTimeline.forwardTime(offset * duration);\n      this._applyStyles(normalizedStyles, null, false, innerContext);\n    });\n\n    // this will ensure that the parent timeline gets all the styles from\n    // the child even if the new timeline below is not used\n    context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);\n\n    // we do this because the window between this timeline and the sub timeline\n    // should ensure that the styles within are exactly the same as they were before\n    context.transformIntoNewTimeline(startTime + duration);\n    context.previousNode = ast;\n  }\n}\nexport class TimelineBuilder {\npublic duration: number = 0;\npublic easing: string = '';\nprivate _previousKeyframe: ɵStyleData = {};\nprivate _currentKeyframe: ɵStyleData;\nprivate _keyframes = new Map<number, ɵStyleData>();\nprivate _styleSummary: {[prop: string]: StyleAtTime} = {};\nprivate _localTimelineStyles: ɵStyleData;\nprivate _backFill: ɵStyleData = {};\nprivate _currentEmptyStepKeyframe: ɵStyleData = null;\n/**\n * @param {?} startTime\n * @param {?=} _globalTimelineStyles\n */\nconstructor(public startTime: number,\nprivate _globalTimelineStyles: ɵStyleData = null) {\n    this._localTimelineStyles = Object.create(this._backFill, {});\n    if (!this._globalTimelineStyles) {\n      this._globalTimelineStyles = this._localTimelineStyles;\n    }\n    this._loadKeyframe();\n  }\n/**\n * @return {?}\n */\nhasStyling(): boolean { return this._keyframes.size > 1; }\n/**\n * @return {?}\n */\nget currentTime() { return this.startTime + this.duration; }\n/**\n * @param {?=} currentTime\n * @return {?}\n */\nfork(currentTime = 0): TimelineBuilder {\n    return new TimelineBuilder(currentTime || this.currentTime, this._globalTimelineStyles);\n  }\n/**\n * @return {?}\n */\nprivate _loadKeyframe() {\n    if (this._currentKeyframe) {\n      this._previousKeyframe = this._currentKeyframe;\n    }\n    this._currentKeyframe = this._keyframes.get(this.duration);\n    if (!this._currentKeyframe) {\n      this._currentKeyframe = Object.create(this._backFill, {});\n      this._keyframes.set(this.duration, this._currentKeyframe);\n    }\n  }\n/**\n * @return {?}\n */\nforwardFrame() {\n    this.duration++;\n    this._loadKeyframe();\n  }\n/**\n * @param {?} time\n * @return {?}\n */\nforwardTime(time: number) {\n    this.duration = time;\n    this._loadKeyframe();\n  }\n/**\n * @param {?} prop\n * @param {?} value\n * @return {?}\n */\nprivate _updateStyle(prop: string, value: string|number) {\n    this._localTimelineStyles[prop] = value;\n    this._globalTimelineStyles[prop] = value;\n    this._styleSummary[prop] = {time: this.currentTime, value};\n  }\n/**\n * @return {?}\n */\nallowOnlyTimelineStyles() { return this._currentEmptyStepKeyframe !== this._currentKeyframe; }\n/**\n * @param {?} styles\n * @param {?=} easing\n * @param {?=} treatAsEmptyStep\n * @return {?}\n */\nsetStyles(styles: ɵStyleData, easing: string = null, treatAsEmptyStep: boolean = false) {\n    if (easing) {\n      this._previousKeyframe['easing'] = easing;\n    }\n\n    if (treatAsEmptyStep) {\n      // special case for animate(duration):\n      // all missing styles are filled with a `*` value then\n      // if any destination styles are filled in later on the same\n      // keyframe then they will override the overridden styles\n      // We use `_globalTimelineStyles` here because there may be\n      // styles in previous keyframes that are not present in this timeline\n      Object.keys(this._globalTimelineStyles).forEach(prop => {\n        this._backFill[prop] = this._globalTimelineStyles[prop] || AUTO_STYLE;\n        this._currentKeyframe[prop] = AUTO_STYLE;\n      });\n      this._currentEmptyStepKeyframe = this._currentKeyframe;\n    } else {\n      Object.keys(styles).forEach(prop => {\n        if (prop !== 'offset') {\n          const /** @type {?} */ val = styles[prop];\n          this._currentKeyframe[prop] = val;\n          if (!this._localTimelineStyles[prop]) {\n            this._backFill[prop] = this._globalTimelineStyles[prop] || AUTO_STYLE;\n          }\n          this._updateStyle(prop, val);\n        }\n      });\n\n      Object.keys(this._localTimelineStyles).forEach(prop => {\n        if (!this._currentKeyframe.hasOwnProperty(prop)) {\n          this._currentKeyframe[prop] = this._localTimelineStyles[prop];\n        }\n      });\n    }\n  }\n/**\n * @return {?}\n */\nsnapshotCurrentStyles() { copyStyles(this._localTimelineStyles, false, this._currentKeyframe); }\n/**\n * @return {?}\n */\ngetFinalKeyframe() { return this._keyframes.get(this.duration); }\n/**\n * @return {?}\n */\nget properties() {\n    const /** @type {?} */ properties: string[] = [];\n    for (let /** @type {?} */ prop in this._currentKeyframe) {\n      properties.push(prop);\n    }\n    return properties;\n  }\n/**\n * @param {?} timeline\n * @return {?}\n */\nmergeTimelineCollectedStyles(timeline: TimelineBuilder) {\n    Object.keys(timeline._styleSummary).forEach(prop => {\n      const /** @type {?} */ details0 = this._styleSummary[prop];\n      const /** @type {?} */ details1 = timeline._styleSummary[prop];\n      if (!details0 || details1.time > details0.time) {\n        this._updateStyle(prop, details1.value);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nbuildKeyframes(): AnimationTimelineInstruction {\n    const /** @type {?} */ finalKeyframes: ɵStyleData[] = [];\n    // special case for when there are only start/destination\n    // styles but no actual animation animate steps...\n    if (this.duration == 0) {\n      const /** @type {?} */ targetKeyframe = this.getFinalKeyframe();\n\n      const /** @type {?} */ firstKeyframe = copyStyles(targetKeyframe, true);\n      firstKeyframe['offset'] = 0;\n      finalKeyframes.push(firstKeyframe);\n\n      const /** @type {?} */ lastKeyframe = copyStyles(targetKeyframe, true);\n      lastKeyframe['offset'] = 1;\n      finalKeyframes.push(lastKeyframe);\n    } else {\n      this._keyframes.forEach((keyframe, time) => {\n        const /** @type {?} */ finalKeyframe = copyStyles(keyframe, true);\n        finalKeyframe['offset'] = time / this.duration;\n        finalKeyframes.push(finalKeyframe);\n      });\n    }\n\n    return createTimelineInstruction(finalKeyframes, this.duration, this.startTime, this.easing);\n  }\n}\n\nfunction TimelineBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nTimelineBuilder.prototype.duration;\n/** @type {?} */\nTimelineBuilder.prototype.easing;\n/** @type {?} */\nTimelineBuilder.prototype._previousKeyframe;\n/** @type {?} */\nTimelineBuilder.prototype._currentKeyframe;\n/** @type {?} */\nTimelineBuilder.prototype._keyframes;\n/** @type {?} */\nTimelineBuilder.prototype._styleSummary;\n/** @type {?} */\nTimelineBuilder.prototype._localTimelineStyles;\n/** @type {?} */\nTimelineBuilder.prototype._backFill;\n/** @type {?} */\nTimelineBuilder.prototype._currentEmptyStepKeyframe;\n/** @type {?} */\nTimelineBuilder.prototype.startTime;\n/** @type {?} */\nTimelineBuilder.prototype._globalTimelineStyles;\n}\n\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction getOffset(ast: AnimationStyleMetadata): number {\n  let /** @type {?} */ offset = ast.offset;\n  if (offset == null) {\n    const /** @type {?} */ styles = ast.styles;\n    if (Array.isArray(styles)) {\n      for (let /** @type {?} */ i = 0; i < styles.length; i++) {\n        const /** @type {?} */ o = /** @type {?} */(( styles[i]['offset'] as number));\n        if (o != null) {\n          offset = o;\n          break;\n        }\n      }\n    } else {\n      offset = /** @type {?} */(( styles['offset'] as number));\n    }\n  }\n  return offset;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationMetadata, AnimationTransitionMetadata, sequence, ɵStyleData} from '@angular/animations';\n\nimport {buildAnimationKeyframes} from './animation_timeline_visitor';\nimport {TransitionMatcherFn} from './animation_transition_expr';\nimport {AnimationTransitionInstruction, createTransitionInstruction} from './animation_transition_instruction';\nexport class AnimationTransitionFactory {\nprivate _animationAst: AnimationMetadata;\n/**\n * @param {?} _triggerName\n * @param {?} ast\n * @param {?} matchFns\n * @param {?} _stateStyles\n */\nconstructor(\nprivate _triggerName: string, ast: AnimationTransitionMetadata,\nprivate matchFns: TransitionMatcherFn[],\nprivate _stateStyles: {[stateName: string]: ɵStyleData}) {\n    const normalizedAst = Array.isArray(ast.animation) ?\n        sequence(<AnimationMetadata[]>ast.animation) :\n        <AnimationMetadata>ast.animation;\n    this._animationAst = normalizedAst;\n  }\n/**\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\nmatch(currentState: any, nextState: any): AnimationTransitionInstruction {\n    if (!oneOrMoreTransitionsMatch(this.matchFns, currentState, nextState)) return;\n\n    const /** @type {?} */ backupStateStyles = this._stateStyles['*'] || {};\n    const /** @type {?} */ currentStateStyles = this._stateStyles[currentState] || backupStateStyles;\n    const /** @type {?} */ nextStateStyles = this._stateStyles[nextState] || backupStateStyles;\n\n    const /** @type {?} */ timelines =\n        buildAnimationKeyframes(this._animationAst, currentStateStyles, nextStateStyles);\n\n    return createTransitionInstruction(\n        this._triggerName, currentState, nextState, nextState === 'void', currentStateStyles,\n        nextStateStyles, timelines);\n  }\n}\n\nfunction AnimationTransitionFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTransitionFactory.prototype._animationAst;\n/** @type {?} */\nAnimationTransitionFactory.prototype._triggerName;\n/** @type {?} */\nAnimationTransitionFactory.prototype.matchFns;\n/** @type {?} */\nAnimationTransitionFactory.prototype._stateStyles;\n}\n\n/**\n * @param {?} matchFns\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\nfunction oneOrMoreTransitionsMatch(\n    matchFns: TransitionMatcherFn[], currentState: any, nextState: any): boolean {\n  return matchFns.some(fn => fn(currentState, nextState));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationAnimateMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationSequenceMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, ɵStyleData} from '@angular/animations';\n\nimport {copyStyles, normalizeStyles} from '../util';\n\nimport {AnimationDslVisitor, visitAnimationNode} from './animation_dsl_visitor';\nimport {parseTransitionExpr} from './animation_transition_expr';\nimport {AnimationTransitionFactory} from './animation_transition_factory';\nimport {AnimationTransitionInstruction, createTransitionInstruction} from './animation_transition_instruction';\nimport {validateAnimationSequence} from './animation_validator_visitor';\n/**\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nexport function buildTrigger(name: string, definitions: AnimationMetadata[]): AnimationTrigger {\n  return new AnimationTriggerVisitor().buildTrigger(name, definitions);\n}\n/**\n * \\@experimental Animation support is experimental.\n */\nexport class AnimationTrigger {\npublic transitionFactories: AnimationTransitionFactory[] = [];\npublic states: {[stateName: string]: ɵStyleData} = {};\n/**\n * @param {?} name\n * @param {?} states\n * @param {?} _transitionAsts\n */\nconstructor(\npublic name: string, states: {[stateName: string]: ɵStyleData},\nprivate _transitionAsts: AnimationTransitionMetadata[]) {\n    Object.keys(states).forEach(\n        stateName => { this.states[stateName] = copyStyles(states[stateName], false); });\n\n    const errors: string[] = [];\n    _transitionAsts.forEach(ast => {\n      const exprs = parseTransitionExpr(ast.expr, errors);\n      const sequenceErrors = validateAnimationSequence(ast);\n      if (sequenceErrors.length) {\n        errors.push(...sequenceErrors);\n      } else {\n        this.transitionFactories.push(\n            new AnimationTransitionFactory(this.name, ast, exprs, states));\n      }\n    });\n\n    if (errors.length) {\n      const LINE_START = '\\n - ';\n      throw new Error(\n          `Animation parsing for the ${name} trigger have failed:${LINE_START}${errors.join(LINE_START)}`);\n    }\n  }\n/**\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\ncreateFallbackInstruction(currentState: any, nextState: any): AnimationTransitionInstruction {\n    const /** @type {?} */ backupStateStyles = this.states['*'] || {};\n    const /** @type {?} */ currentStateStyles = this.states[currentState] || backupStateStyles;\n    const /** @type {?} */ nextStateStyles = this.states[nextState] || backupStateStyles;\n    return createTransitionInstruction(\n        this.name, currentState, nextState, nextState == 'void', currentStateStyles,\n        nextStateStyles, []);\n  }\n/**\n * @param {?} currentState\n * @param {?} nextState\n * @return {?}\n */\nmatchTransition(currentState: any, nextState: any): AnimationTransitionInstruction {\n    for (let /** @type {?} */ i = 0; i < this.transitionFactories.length; i++) {\n      let /** @type {?} */ result = this.transitionFactories[i].match(currentState, nextState);\n      if (result) return result;\n    }\n  }\n}\n\nfunction AnimationTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTrigger.prototype.transitionFactories;\n/** @type {?} */\nAnimationTrigger.prototype.states;\n/** @type {?} */\nAnimationTrigger.prototype.name;\n/** @type {?} */\nAnimationTrigger.prototype._transitionAsts;\n}\n\nclass AnimationTriggerContext {\npublic errors: string[] = [];\npublic states: {[stateName: string]: ɵStyleData} = {};\npublic transitions: AnimationTransitionMetadata[] = [];\n}\n\nfunction AnimationTriggerContext_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationTriggerContext.prototype.errors;\n/** @type {?} */\nAnimationTriggerContext.prototype.states;\n/** @type {?} */\nAnimationTriggerContext.prototype.transitions;\n}\n\nclass AnimationTriggerVisitor implements AnimationDslVisitor {\n/**\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nbuildTrigger(name: string, definitions: AnimationMetadata[]): AnimationTrigger {\n    const /** @type {?} */ context = new AnimationTriggerContext();\n    definitions.forEach(def => visitAnimationNode(this, def, context));\n    return new AnimationTrigger(name, context.states, context.transitions);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitState(ast: AnimationStateMetadata, context: any): any {\n    const /** @type {?} */ styles = normalizeStyles(ast.styles.styles);\n    ast.name.split(/\\s*,\\s*/).forEach(name => { context.states[name] = styles; });\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitTransition(ast: AnimationTransitionMetadata, context: any): any {\n    context.transitions.push(ast);\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSequence(ast: AnimationSequenceMetadata, context: any) {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitGroup(ast: AnimationGroupMetadata, context: any) {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitAnimate(ast: AnimationAnimateMetadata, context: any) {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitStyle(ast: AnimationStyleMetadata, context: any) {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyframeSequence(ast: AnimationKeyframesSequenceMetadata, context: any) {\n    // these values are not visited in this AST\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimateTimings, AnimationAnimateMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationMetadataType, AnimationSequenceMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata, sequence} from '@angular/animations';\n\nimport {normalizeStyles, parseTimeExpression} from '../util';\n\nimport {AnimationDslVisitor, visitAnimationNode} from './animation_dsl_visitor';\n\nexport type StyleTimeTuple = {\n  startTime: number; endTime: number;\n};\n/**\n * @param {?} ast\n * @return {?}\n */\nexport function validateAnimationSequence(ast: AnimationMetadata) {\n  const /** @type {?} */ normalizedAst =\n      Array.isArray(ast) ? sequence( /** @type {?} */((<AnimationMetadata[]>ast))) : /** @type {?} */(( <AnimationMetadata>ast));\n  return new AnimationValidatorVisitor().validate(normalizedAst);\n}\nexport class AnimationValidatorVisitor implements AnimationDslVisitor {\n/**\n * @param {?} ast\n * @return {?}\n */\nvalidate(ast: AnimationMetadata): string[] {\n    const /** @type {?} */ context = new AnimationValidatorContext();\n    visitAnimationNode(this, ast, context);\n    return context.errors;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitState(ast: AnimationStateMetadata, context: any): any {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitTransition(ast: AnimationTransitionMetadata, context: any): any {\n    // these values are not visited in this AST\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitSequence(ast: AnimationSequenceMetadata, context: AnimationValidatorContext): any {\n    ast.steps.forEach(step => visitAnimationNode(this, step, context));\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitGroup(ast: AnimationGroupMetadata, context: AnimationValidatorContext): any {\n    const /** @type {?} */ currentTime = context.currentTime;\n    let /** @type {?} */ furthestTime = 0;\n    ast.steps.forEach(step => {\n      context.currentTime = currentTime;\n      visitAnimationNode(this, step, context);\n      furthestTime = Math.max(furthestTime, context.currentTime);\n    });\n    context.currentTime = furthestTime;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitAnimate(ast: AnimationAnimateMetadata, context: AnimationValidatorContext): any {\n    // we reassign the timings here so that they are not reparsed each\n    // time an animation occurs\n    context.currentAnimateTimings = ast.timings =\n        parseTimeExpression( /** @type {?} */((<string|number>ast.timings)), context.errors);\n\n    const /** @type {?} */ astType = ast.styles && ast.styles.type;\n    if (astType == AnimationMetadataType.KeyframeSequence) {\n      this.visitKeyframeSequence( /** @type {?} */((<AnimationKeyframesSequenceMetadata>ast.styles)), context);\n    } else {\n      context.currentTime +=\n          context.currentAnimateTimings.duration + context.currentAnimateTimings.delay;\n      if (astType == AnimationMetadataType.Style) {\n        this.visitStyle( /** @type {?} */((<AnimationStyleMetadata>ast.styles)), context);\n      }\n    }\n\n    context.currentAnimateTimings = null;\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitStyle(ast: AnimationStyleMetadata, context: AnimationValidatorContext): any {\n    const /** @type {?} */ styleData = normalizeStyles(ast.styles);\n    const /** @type {?} */ timings = context.currentAnimateTimings;\n    let /** @type {?} */ endTime = context.currentTime;\n    let /** @type {?} */ startTime = context.currentTime;\n    if (timings && startTime > 0) {\n      startTime -= timings.duration + timings.delay;\n    }\n    Object.keys(styleData).forEach(prop => {\n      const /** @type {?} */ collectedEntry = context.collectedStyles[prop];\n      let /** @type {?} */ updateCollectedStyle = true;\n      if (collectedEntry) {\n        if (startTime != endTime && startTime >= collectedEntry.startTime &&\n            endTime <= collectedEntry.endTime) {\n          context.errors.push(\n              `The CSS property \"${prop}\" that exists between the times of \"${collectedEntry.startTime}ms\" and \"${collectedEntry.endTime}ms\" is also being animated in a parallel animation between the times of \"${startTime}ms\" and \"${endTime}ms\"`);\n          updateCollectedStyle = false;\n        }\n\n        // we always choose the smaller start time value since we\n        // want to have a record of the entire animation window where\n        // the style property is being animated in between\n        startTime = collectedEntry.startTime;\n      }\n      if (updateCollectedStyle) {\n        context.collectedStyles[prop] = {startTime, endTime};\n      }\n    });\n  }\n/**\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitKeyframeSequence(\n      ast: AnimationKeyframesSequenceMetadata, context: AnimationValidatorContext): any {\n    let /** @type {?} */ totalKeyframesWithOffsets = 0;\n    const /** @type {?} */ offsets: number[] = [];\n    let /** @type {?} */ offsetsOutOfOrder = false;\n    let /** @type {?} */ keyframesOutOfRange = false;\n    let /** @type {?} */ previousOffset: number = 0;\n    ast.steps.forEach(step => {\n      const /** @type {?} */ styleData = normalizeStyles(step.styles);\n      let /** @type {?} */ offset = 0;\n      if (styleData.hasOwnProperty('offset')) {\n        totalKeyframesWithOffsets++;\n        offset = /** @type {?} */(( <number>styleData['offset']));\n      }\n      keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;\n      offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;\n      previousOffset = offset;\n      offsets.push(offset);\n    });\n\n    if (keyframesOutOfRange) {\n      context.errors.push(`Please ensure that all keyframe offsets are between 0 and 1`);\n    }\n\n    if (offsetsOutOfOrder) {\n      context.errors.push(`Please ensure that all keyframe offsets are in order`);\n    }\n\n    const /** @type {?} */ length = ast.steps.length;\n    let /** @type {?} */ generatedOffset = 0;\n    if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {\n      context.errors.push(`Not all style() steps within the declared keyframes() contain offsets`);\n    } else if (totalKeyframesWithOffsets == 0) {\n      generatedOffset = 1 / length;\n    }\n\n    const /** @type {?} */ limit = length - 1;\n    const /** @type {?} */ currentTime = context.currentTime;\n    const /** @type {?} */ animateDuration = context.currentAnimateTimings.duration;\n    ast.steps.forEach((step, i) => {\n      const /** @type {?} */ offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];\n      const /** @type {?} */ durationUpToThisFrame = offset * animateDuration;\n      context.currentTime =\n          currentTime + context.currentAnimateTimings.delay + durationUpToThisFrame;\n      context.currentAnimateTimings.duration = durationUpToThisFrame;\n      this.visitStyle(step, context);\n    });\n  }\n}\nexport class AnimationValidatorContext {\npublic errors: string[] = [];\npublic currentTime: number = 0;\npublic currentAnimateTimings: AnimateTimings;\npublic collectedStyles: {[propName: string]: StyleTimeTuple} = {};\n}\n\nfunction AnimationValidatorContext_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationValidatorContext.prototype.errors;\n/** @type {?} */\nAnimationValidatorContext.prototype.currentTime;\n/** @type {?} */\nAnimationValidatorContext.prototype.currentAnimateTimings;\n/** @type {?} */\nAnimationValidatorContext.prototype.collectedStyles;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent, AnimationPlayer, AnimationTriggerMetadata, NoopAnimationPlayer, ɵAnimationGroupPlayer, ɵStyleData} from '@angular/animations';\n\nimport {AnimationTimelineInstruction} from '../dsl/animation_timeline_instruction';\nimport {AnimationTransitionInstruction} from '../dsl/animation_transition_instruction';\nimport {AnimationTrigger, buildTrigger} from '../dsl/animation_trigger';\nimport {AnimationStyleNormalizer} from '../dsl/style_normalization/animation_style_normalizer';\nimport {eraseStyles, setStyles} from '../util';\n\nimport {AnimationDriver} from './animation_driver';\n\nexport interface QueuedAnimationTransitionTuple {\n  element: any;\n  player: AnimationPlayer;\n  triggerName: string;\n  event: AnimationEvent;\n}\n\nexport interface TriggerListenerTuple {\n  triggerName: string;\n  phase: string;\n  callback: (event: any) => any;\n}\n\nconst /** @type {?} */ MARKED_FOR_ANIMATION_CLASSNAME = 'ng-animating';\nconst /** @type {?} */ MARKED_FOR_ANIMATION_SELECTOR = '.ng-animating';\nconst /** @type {?} */ MARKED_FOR_REMOVAL = '$$ngRemove';\nconst /** @type {?} */ VOID_STATE = 'void';\nexport class DomAnimationEngine {\nprivate _flaggedInserts = new Set<any>();\nprivate _queuedRemovals = new Map<any, () => any>();\nprivate _queuedTransitionAnimations: QueuedAnimationTransitionTuple[] = [];\nprivate _activeTransitionAnimations = new Map<any, {[triggerName: string]: AnimationPlayer}>();\nprivate _activeElementAnimations = new Map<any, AnimationPlayer[]>();\nprivate _elementTriggerStates = new Map<any, {[triggerName: string]: string}>();\nprivate _triggers: {[triggerName: string]: AnimationTrigger} = Object.create(null);\nprivate _triggerListeners = new Map<any, TriggerListenerTuple[]>();\nprivate _pendingListenerRemovals = new Map<any, TriggerListenerTuple[]>();\n/**\n * @param {?} _driver\n * @param {?} _normalizer\n */\nconstructor(private _driver: AnimationDriver,\nprivate _normalizer: AnimationStyleNormalizer) {}\n/**\n * @return {?}\n */\nget queuedPlayers(): AnimationPlayer[] {\n    return this._queuedTransitionAnimations.map(q => q.player);\n  }\n/**\n * @return {?}\n */\nget activePlayers(): AnimationPlayer[] {\n    const /** @type {?} */ players: AnimationPlayer[] = [];\n    this._activeElementAnimations.forEach(activePlayers => players.push(...activePlayers));\n    return players;\n  }\n/**\n * @param {?} trigger\n * @param {?=} name\n * @return {?}\n */\nregisterTrigger(trigger: AnimationTriggerMetadata, name: string = null): void {\n    name = name || trigger.name;\n    if (this._triggers[name]) {\n      return;\n    }\n    this._triggers[name] = buildTrigger(name, trigger.definitions);\n  }\n/**\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonInsert(element: any, domFn: () => any): void {\n    if (element['nodeType'] == 1) {\n      this._flaggedInserts.add(element);\n    }\n    domFn();\n  }\n/**\n * @param {?} element\n * @param {?} domFn\n * @return {?}\n */\nonRemove(element: any, domFn: () => any): void {\n    if (element['nodeType'] != 1) {\n      domFn();\n      return;\n    }\n\n    let /** @type {?} */ lookupRef = this._elementTriggerStates.get(element);\n    if (lookupRef) {\n      const /** @type {?} */ possibleTriggers = Object.keys(lookupRef);\n      const /** @type {?} */ hasRemoval = possibleTriggers.some(triggerName => {\n        const /** @type {?} */ oldValue = lookupRef[triggerName];\n        const /** @type {?} */ instruction = this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);\n        return !!instruction;\n      });\n      if (hasRemoval) {\n        element[MARKED_FOR_REMOVAL] = true;\n        this._queuedRemovals.set(element, domFn);\n        return;\n      }\n    }\n\n    // this means that there are no animations to take on this\n    // leave operation therefore we should fire the done|start callbacks\n    if (this._triggerListeners.has(element)) {\n      element[MARKED_FOR_REMOVAL] = true;\n      this._queuedRemovals.set(element, () => {});\n    }\n    this._onRemovalTransition(element).forEach(player => player.destroy());\n    domFn();\n  }\n/**\n * @param {?} element\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nsetProperty(element: any, property: string, value: any): void {\n    const /** @type {?} */ trigger = this._triggers[property];\n    if (!trigger) {\n      throw new Error(`The provided animation trigger \"${property}\" has not been registered!`);\n    }\n\n    let /** @type {?} */ lookupRef = this._elementTriggerStates.get(element);\n    if (!lookupRef) {\n      this._elementTriggerStates.set(element, lookupRef = {});\n    }\n\n    let /** @type {?} */ oldValue = lookupRef.hasOwnProperty(property) ? lookupRef[property] : VOID_STATE;\n    if (oldValue !== value) {\n      value = normalizeTriggerValue(value);\n      let /** @type {?} */ instruction = trigger.matchTransition(oldValue, value);\n      if (!instruction) {\n        // we do this to make sure we always have an animation player so\n        // that callback operations are properly called\n        instruction = trigger.createFallbackInstruction(oldValue, value);\n      }\n      this.animateTransition(element, instruction);\n      lookupRef[property] = value;\n    }\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} eventPhase\n * @param {?} callback\n * @return {?}\n */\nlisten(element: any, eventName: string, eventPhase: string, callback: (event: any) => any):\n      () => void {\n    if (!eventPhase) {\n      throw new Error(\n          `Unable to listen on the animation trigger \"${eventName}\" because the provided event is undefined!`);\n    }\n    if (!this._triggers[eventName]) {\n      throw new Error(\n          `Unable to listen on the animation trigger event \"${eventPhase}\" because the animation trigger \"${eventName}\" doesn't exist!`);\n    }\n    let /** @type {?} */ elementListeners = this._triggerListeners.get(element);\n    if (!elementListeners) {\n      this._triggerListeners.set(element, elementListeners = []);\n    }\n    validatePlayerEvent(eventName, eventPhase);\n    const /** @type {?} */ tuple = /** @type {?} */(( <TriggerListenerTuple>{triggerName: eventName, phase: eventPhase, callback}));\n    elementListeners.push(tuple);\n    return () => {\n      // this is queued up in the event that a removal animation is set\n      // to fire on the element (the listeners need to be set during flush)\n      getOrSetAsInMap(this._pendingListenerRemovals, element, []).push(tuple);\n    };\n  }\n/**\n * @return {?}\n */\nprivate _clearPendingListenerRemovals() {\n    this._pendingListenerRemovals.forEach((tuples: TriggerListenerTuple[], element: any) => {\n      const /** @type {?} */ elementListeners = this._triggerListeners.get(element);\n      if (elementListeners) {\n        tuples.forEach(tuple => {\n          const /** @type {?} */ index = elementListeners.indexOf(tuple);\n          if (index >= 0) {\n            elementListeners.splice(index, 1);\n          }\n        });\n      }\n    });\n    this._pendingListenerRemovals.clear();\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _onRemovalTransition(element: any): AnimationPlayer[] {\n    // when a parent animation is set to trigger a removal we want to\n    // find all of the children that are currently animating and clear\n    // them out by destroying each of them.\n    const /** @type {?} */ elms = element.querySelectorAll(MARKED_FOR_ANIMATION_SELECTOR);\n    for (let /** @type {?} */ i = 0; i < elms.length; i++) {\n      const /** @type {?} */ elm = elms[i];\n      const /** @type {?} */ activePlayers = this._activeElementAnimations.get(elm);\n      if (activePlayers) {\n        activePlayers.forEach(player => player.destroy());\n      }\n\n      const /** @type {?} */ activeTransitions = this._activeTransitionAnimations.get(elm);\n      if (activeTransitions) {\n        Object.keys(activeTransitions).forEach(triggerName => {\n          const /** @type {?} */ player = activeTransitions[triggerName];\n          if (player) {\n            player.destroy();\n          }\n        });\n      }\n    }\n\n    // we make a copy of the array because the actual source array is modified\n    // each time a player is finished/destroyed (the forEach loop would fail otherwise)\n    return copyArray(this._activeElementAnimations.get(element));\n  }\n/**\n * @param {?} element\n * @param {?} instruction\n * @return {?}\n */\nanimateTransition(element: any, instruction: AnimationTransitionInstruction): AnimationPlayer {\n    const /** @type {?} */ triggerName = instruction.triggerName;\n\n    let /** @type {?} */ previousPlayers: AnimationPlayer[];\n    if (instruction.isRemovalTransition) {\n      previousPlayers = this._onRemovalTransition(element);\n    } else {\n      previousPlayers = [];\n      const /** @type {?} */ existingTransitions = this._activeTransitionAnimations.get(element);\n      const /** @type {?} */ existingPlayer = existingTransitions ? existingTransitions[triggerName] : null;\n      if (existingPlayer) {\n        previousPlayers.push(existingPlayer);\n      }\n    }\n\n    // it's important to do this step before destroying the players\n    // so that the onDone callback below won't fire before this\n    eraseStyles(element, instruction.fromStyles);\n\n    // we first run this so that the previous animation player\n    // data can be passed into the successive animation players\n    let /** @type {?} */ totalTime = 0;\n    const /** @type {?} */ players = instruction.timelines.map((timelineInstruction, i) => {\n      totalTime = Math.max(totalTime, timelineInstruction.totalTime);\n      return this._buildPlayer(element, timelineInstruction, previousPlayers, i);\n    });\n\n    previousPlayers.forEach(previousPlayer => previousPlayer.destroy());\n    const /** @type {?} */ player = optimizeGroupPlayer(players);\n    player.onDone(() => {\n      player.destroy();\n      const /** @type {?} */ elmTransitionMap = this._activeTransitionAnimations.get(element);\n      if (elmTransitionMap) {\n        delete elmTransitionMap[triggerName];\n        if (Object.keys(elmTransitionMap).length == 0) {\n          this._activeTransitionAnimations.delete(element);\n        }\n      }\n      deleteFromArrayMap(this._activeElementAnimations, element, player);\n      setStyles(element, instruction.toStyles);\n    });\n\n    const /** @type {?} */ elmTransitionMap = getOrSetAsInMap(this._activeTransitionAnimations, element, {});\n    elmTransitionMap[triggerName] = player;\n\n    this._queuePlayer(\n        element, triggerName, player,\n        makeAnimationEvent(\n            element, triggerName, instruction.fromState, instruction.toState,\n            null,  // this will be filled in during event creation\n            totalTime));\n\n    return player;\n  }\n/**\n * @param {?} element\n * @param {?} instructions\n * @param {?=} previousPlayers\n * @return {?}\n */\npublic animateTimeline(\n      element: any, instructions: AnimationTimelineInstruction[],\n      previousPlayers: AnimationPlayer[] = []): AnimationPlayer {\n    const /** @type {?} */ players = instructions.map((instruction, i) => {\n      const /** @type {?} */ player = this._buildPlayer(element, instruction, previousPlayers, i);\n      player.onDestroy(\n          () => { deleteFromArrayMap(this._activeElementAnimations, element, player); });\n      this._markPlayerAsActive(element, player);\n      return player;\n    });\n    return optimizeGroupPlayer(players);\n  }\n/**\n * @param {?} element\n * @param {?} instruction\n * @param {?} previousPlayers\n * @param {?=} index\n * @return {?}\n */\nprivate _buildPlayer(\n      element: any, instruction: AnimationTimelineInstruction, previousPlayers: AnimationPlayer[],\n      index: number = 0): AnimationPlayer {\n    // only the very first animation can absorb the previous styles. This\n    // is here to prevent the an overlap situation where a group animation\n    // absorbs previous styles multiple times for the same element.\n    if (index && previousPlayers.length) {\n      previousPlayers = [];\n    }\n    return this._driver.animate(\n        element, this._normalizeKeyframes(instruction.keyframes), instruction.duration,\n        instruction.delay, instruction.easing, previousPlayers);\n  }\n/**\n * @param {?} keyframes\n * @return {?}\n */\nprivate _normalizeKeyframes(keyframes: ɵStyleData[]): ɵStyleData[] {\n    const /** @type {?} */ errors: string[] = [];\n    const /** @type {?} */ normalizedKeyframes: ɵStyleData[] = [];\n    keyframes.forEach(kf => {\n      const /** @type {?} */ normalizedKeyframe: ɵStyleData = {};\n      Object.keys(kf).forEach(prop => {\n        let /** @type {?} */ normalizedProp = prop;\n        let /** @type {?} */ normalizedValue = kf[prop];\n        if (prop != 'offset') {\n          normalizedProp = this._normalizer.normalizePropertyName(prop, errors);\n          normalizedValue =\n              this._normalizer.normalizeStyleValue(prop, normalizedProp, kf[prop], errors);\n        }\n        normalizedKeyframe[normalizedProp] = normalizedValue;\n      });\n      normalizedKeyframes.push(normalizedKeyframe);\n    });\n    if (errors.length) {\n      const /** @type {?} */ LINE_START = '\\n - ';\n      throw new Error(\n          `Unable to animate due to the following errors:${LINE_START}${errors.join(LINE_START)}`);\n    }\n    return normalizedKeyframes;\n  }\n/**\n * @param {?} element\n * @param {?} player\n * @return {?}\n */\nprivate _markPlayerAsActive(element: any, player: AnimationPlayer) {\n    const /** @type {?} */ elementAnimations = getOrSetAsInMap(this._activeElementAnimations, element, []);\n    elementAnimations.push(player);\n  }\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} player\n * @param {?} event\n * @return {?}\n */\nprivate _queuePlayer(\n      element: any, triggerName: string, player: AnimationPlayer, event: AnimationEvent) {\n    const /** @type {?} */ tuple = /** @type {?} */(( <QueuedAnimationTransitionTuple>{element, player, triggerName, event}));\n    this._queuedTransitionAnimations.push(tuple);\n    player.init();\n\n    element.classList.add(MARKED_FOR_ANIMATION_CLASSNAME);\n    player.onDone(() => { element.classList.remove(MARKED_FOR_ANIMATION_CLASSNAME); });\n  }\n/**\n * @return {?}\n */\nprivate _flushQueuedAnimations() {\n    parentLoop: while (this._queuedTransitionAnimations.length) {\n      const {player, element, triggerName, event} = this._queuedTransitionAnimations.shift();\n\n      let /** @type {?} */ parent = element;\n      while (parent = parent.parentNode) {\n        // this means that a parent element will or will not\n        // have its own animation operation which in this case\n        // there's no point in even trying to do an animation\n        if (parent[MARKED_FOR_REMOVAL]) continue parentLoop;\n      }\n\n      const /** @type {?} */ listeners = this._triggerListeners.get(element);\n      if (listeners) {\n        listeners.forEach(tuple => {\n          if (tuple.triggerName == triggerName) {\n            listenOnPlayer(player, tuple.phase, event, tuple.callback);\n          }\n        });\n      }\n\n      // if a removal exists for the given element then we need cancel\n      // all the queued players so that a proper removal animation can go\n      if (this._queuedRemovals.has(element)) {\n        player.destroy();\n        continue;\n      }\n\n      this._markPlayerAsActive(element, player);\n\n      // in the event that an animation throws an error then we do\n      // not want to re-run animations on any previous animations\n      // if they have already been kicked off beforehand\n      player.init();\n      if (!player.hasStarted()) {\n        player.play();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nflush() {\n    const /** @type {?} */ leaveListeners = new Map<any, TriggerListenerTuple[]>();\n    this._queuedRemovals.forEach((callback, element) => {\n      const /** @type {?} */ tuple = this._pendingListenerRemovals.get(element);\n      if (tuple) {\n        leaveListeners.set(element, tuple);\n        this._pendingListenerRemovals.delete(element);\n      }\n    });\n\n    this._clearPendingListenerRemovals();\n    this._pendingListenerRemovals = leaveListeners;\n\n    this._flushQueuedAnimations();\n\n    let /** @type {?} */ flushAgain = false;\n    this._queuedRemovals.forEach((callback, element) => {\n      // an item that was inserted/removed in the same flush means\n      // that an animation should not happen anyway\n      if (this._flaggedInserts.has(element)) return;\n\n      let /** @type {?} */ parent = element;\n      let /** @type {?} */ players: AnimationPlayer[] = [];\n      while (parent = parent.parentNode) {\n        // there is no reason to even try to\n        if (parent[MARKED_FOR_REMOVAL]) {\n          callback();\n          return;\n        }\n\n        const /** @type {?} */ match = this._activeElementAnimations.get(parent);\n        if (match) {\n          players.push(...match);\n          break;\n        }\n      }\n\n      // the loop was unable to find an parent that is animating even\n      // though this element has set to be removed, so the algorithm\n      // should check to see if there are any triggers on the element\n      // that are present to handle a leave animation and then setup\n      // those players to facilitate the callback after done\n      if (players.length == 0) {\n        // this means that the element has valid state triggers\n        const /** @type {?} */ stateDetails = this._elementTriggerStates.get(element);\n        if (stateDetails) {\n          Object.keys(stateDetails).forEach(triggerName => {\n            flushAgain = true;\n            const /** @type {?} */ oldValue = stateDetails[triggerName];\n            const /** @type {?} */ instruction = this._triggers[triggerName].matchTransition(oldValue, VOID_STATE);\n            if (instruction) {\n              players.push(this.animateTransition(element, instruction));\n            } else {\n              const /** @type {?} */ event = makeAnimationEvent(element, triggerName, oldValue, VOID_STATE, '', 0);\n              const /** @type {?} */ player = new NoopAnimationPlayer();\n              this._queuePlayer(element, triggerName, player, event);\n            }\n          });\n        }\n      }\n\n      if (players.length) {\n        optimizeGroupPlayer(players).onDone(callback);\n      } else {\n        callback();\n      }\n    });\n\n    this._queuedRemovals.clear();\n    this._flaggedInserts.clear();\n\n    // this means that one or more leave animations were detected\n    if (flushAgain) {\n      this._flushQueuedAnimations();\n      this._clearPendingListenerRemovals();\n    }\n  }\n}\n\nfunction DomAnimationEngine_tsickle_Closure_declarations() {\n/** @type {?} */\nDomAnimationEngine.prototype._flaggedInserts;\n/** @type {?} */\nDomAnimationEngine.prototype._queuedRemovals;\n/** @type {?} */\nDomAnimationEngine.prototype._queuedTransitionAnimations;\n/** @type {?} */\nDomAnimationEngine.prototype._activeTransitionAnimations;\n/** @type {?} */\nDomAnimationEngine.prototype._activeElementAnimations;\n/** @type {?} */\nDomAnimationEngine.prototype._elementTriggerStates;\n/** @type {?} */\nDomAnimationEngine.prototype._triggers;\n/** @type {?} */\nDomAnimationEngine.prototype._triggerListeners;\n/** @type {?} */\nDomAnimationEngine.prototype._pendingListenerRemovals;\n/** @type {?} */\nDomAnimationEngine.prototype._driver;\n/** @type {?} */\nDomAnimationEngine.prototype._normalizer;\n}\n\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} defaultValue\n * @return {?}\n */\nfunction getOrSetAsInMap(map: Map<any, any>, key: any, defaultValue: any) {\n  let /** @type {?} */ value = map.get(key);\n  if (!value) {\n    map.set(key, value = defaultValue);\n  }\n  return value;\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction deleteFromArrayMap(map: Map<any, any[]>, key: any, value: any) {\n  let /** @type {?} */ arr = map.get(key);\n  if (arr) {\n    const /** @type {?} */ index = arr.indexOf(value);\n    if (index >= 0) {\n      arr.splice(index, 1);\n      if (arr.length == 0) {\n        map.delete(key);\n      }\n    }\n  }\n}\n/**\n * @param {?} players\n * @return {?}\n */\nfunction optimizeGroupPlayer(players: AnimationPlayer[]): AnimationPlayer {\n  switch (players.length) {\n    case 0:\n      return new NoopAnimationPlayer();\n    case 1:\n      return players[0];\n    default:\n      return new ɵAnimationGroupPlayer(players);\n  }\n}\n/**\n * @param {?} source\n * @return {?}\n */\nfunction copyArray(source: any[]): any[] {\n  return source ? source.splice(0) : [];\n}\n/**\n * @param {?} triggerName\n * @param {?} eventName\n * @return {?}\n */\nfunction validatePlayerEvent(triggerName: string, eventName: string) {\n  switch (eventName) {\n    case 'start':\n    case 'done':\n      return;\n    default:\n      throw new Error(\n          `The provided animation trigger event \"${eventName}\" for the animation trigger \"${triggerName}\" is not supported!`);\n  }\n}\n/**\n * @param {?} player\n * @param {?} eventName\n * @param {?} baseEvent\n * @param {?} callback\n * @return {?}\n */\nfunction listenOnPlayer(\n    player: AnimationPlayer, eventName: string, baseEvent: AnimationEvent,\n    callback: (event: any) => any) {\n  switch (eventName) {\n    case 'start':\n      player.onStart(() => {\n        const /** @type {?} */ event = copyAnimationEvent(baseEvent);\n        event.phaseName = 'start';\n        callback(event);\n      });\n      break;\n    case 'done':\n      player.onDone(() => {\n        const /** @type {?} */ event = copyAnimationEvent(baseEvent);\n        event.phaseName = 'done';\n        callback(event);\n      });\n      break;\n  }\n}\n/**\n * @param {?} e\n * @return {?}\n */\nfunction copyAnimationEvent(e: AnimationEvent): AnimationEvent {\n  return makeAnimationEvent(\n      e.element, e.triggerName, e.fromState, e.toState, e.phaseName, e.totalTime);\n}\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} phaseName\n * @param {?} totalTime\n * @return {?}\n */\nfunction makeAnimationEvent(\n    element: any, triggerName: string, fromState: string, toState: string, phaseName: string,\n    totalTime: number): AnimationEvent {\n  return /** @type {?} */(( <AnimationEvent>{element, triggerName, fromState, toState, phaseName, totalTime}));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeTriggerValue(value: any): string {\n  switch (typeof value) {\n    case 'boolean':\n      return value ? '1' : '0';\n    default:\n      return value ? value.toString() : null;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationMetadata, AnimationPlayer, AnimationStyleMetadata, sequence, ɵStyleData} from '@angular/animations';\n\nimport {AnimationDriver} from '../render/animation_driver';\nimport {DomAnimationEngine} from '../render/dom_animation_engine';\nimport {normalizeStyles} from '../util';\n\nimport {AnimationTimelineInstruction} from './animation_timeline_instruction';\nimport {buildAnimationKeyframes} from './animation_timeline_visitor';\nimport {validateAnimationSequence} from './animation_validator_visitor';\nimport {AnimationStyleNormalizer} from './style_normalization/animation_style_normalizer';\nexport class Animation {\nprivate _animationAst: AnimationMetadata;\n/**\n * @param {?} input\n */\nconstructor(input: AnimationMetadata|AnimationMetadata[]) {\n    const ast =\n        Array.isArray(input) ? sequence(<AnimationMetadata[]>input) : <AnimationMetadata>input;\n    const errors = validateAnimationSequence(ast);\n    if (errors.length) {\n      const errorMessage = `animation validation failed:\\n${errors.join(\"\\n\")}`;\n      throw new Error(errorMessage);\n    }\n    this._animationAst = ast;\n  }\n/**\n * @param {?} startingStyles\n * @param {?} destinationStyles\n * @return {?}\n */\nbuildTimelines(\n      startingStyles: ɵStyleData|ɵStyleData[],\n      destinationStyles: ɵStyleData|ɵStyleData[]): AnimationTimelineInstruction[] {\n    const /** @type {?} */ start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : /** @type {?} */((\n                                                  <ɵStyleData>startingStyles));\n    const /** @type {?} */ dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : /** @type {?} */((\n                                                    <ɵStyleData>destinationStyles));\n    return buildAnimationKeyframes(this._animationAst, start, dest);\n  }\n/**\n * @param {?} injector\n * @param {?} element\n * @param {?=} startingStyles\n * @param {?=} destinationStyles\n * @return {?}\n */\nprivate create(\n      injector: any, element: any, startingStyles: ɵStyleData = {},\n      destinationStyles: ɵStyleData = {}): AnimationPlayer {\n    const /** @type {?} */ instructions = this.buildTimelines(startingStyles, destinationStyles);\n\n    // note the code below is only here to make the tests happy (once the new renderer is\n    // within core then the code below will interact with Renderer.transition(...))\n    const /** @type {?} */ driver: AnimationDriver = injector.get(AnimationDriver);\n    const /** @type {?} */ normalizer: AnimationStyleNormalizer = injector.get(AnimationStyleNormalizer);\n    const /** @type {?} */ engine = new DomAnimationEngine(driver, normalizer);\n    return engine.animateTimeline(element, instructions);\n  }\n}\n\nfunction Animation_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimation.prototype._animationAst;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationStyleNormalizer} from './animation_style_normalizer';\nexport class WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n/**\n * @param {?} propertyName\n * @param {?} errors\n * @return {?}\n */\nnormalizePropertyName(propertyName: string, errors: string[]): string {\n    return dashCaseToCamelCase(propertyName);\n  }\n/**\n * @param {?} userProvidedProperty\n * @param {?} normalizedProperty\n * @param {?} value\n * @param {?} errors\n * @return {?}\n */\nnormalizeStyleValue(\n      userProvidedProperty: string, normalizedProperty: string, value: string|number,\n      errors: string[]): string {\n    let /** @type {?} */ unit: string = '';\n    const /** @type {?} */ strVal = value.toString().trim();\n\n    if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n      if (typeof value === 'number') {\n        unit = 'px';\n      } else {\n        const /** @type {?} */ valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n          errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);\n        }\n      }\n    }\n    return strVal + unit;\n  }\n}\n\nconst /** @type {?} */ DIMENSIONAL_PROP_MAP = makeBooleanMap(\n    'width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent'\n        .split(','));\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction makeBooleanMap(keys: string[]): {[key: string]: boolean} {\n  const /** @type {?} */ map: {[key: string]: boolean} = {};\n  keys.forEach(key => map[key] = true);\n  return map;\n}\n\nconst /** @type {?} */ DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: any[]) => m[1].toUpperCase());\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationPlayer, NoopAnimationPlayer} from '@angular/animations';\n\n\n\n/**\n * @experimental\n */\nexport class NoopAnimationDriver implements AnimationDriver {\n  animate(\n      element: any, keyframes: {[key: string]: string | number}[], duration: number, delay: number,\n      easing: string, previousPlayers: any[] = []): AnimationPlayer {\n    return new NoopAnimationPlayer();\n  }\n}\n\n/**\n * @experimental\n */\nexport abstract class AnimationDriver {\n  static NOOP: AnimationDriver = new NoopAnimationDriver();\n  abstract animate(\n      element: any, keyframes: {[key: string]: string | number}[], duration: number, delay: number,\n      easing: string, previousPlayers?: any[]): any;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵStyleData} from '@angular/animations';\nimport {AnimationEngineInstruction, AnimationTransitionInstructionType} from '../render/animation_engine_instruction';\nimport {AnimationTimelineInstruction} from './animation_timeline_instruction';\n\nexport interface AnimationTransitionInstruction extends AnimationEngineInstruction {\n  triggerName: string;\n  isRemovalTransition: boolean;\n  fromState: string;\n  fromStyles: ɵStyleData;\n  toState: string;\n  toStyles: ɵStyleData;\n  timelines: AnimationTimelineInstruction[];\n}\n/**\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} isRemovalTransition\n * @param {?} fromStyles\n * @param {?} toStyles\n * @param {?} timelines\n * @return {?}\n */\nexport function createTransitionInstruction(\n    triggerName: string, fromState: string, toState: string, isRemovalTransition: boolean,\n    fromStyles: ɵStyleData, toStyles: ɵStyleData,\n    timelines: AnimationTimelineInstruction[]): AnimationTransitionInstruction {\n  return {\n    type: AnimationTransitionInstructionType.TransitionAnimation,\n    triggerName,\n    isRemovalTransition,\n    fromState,\n    fromStyles,\n    toState,\n    toStyles,\n    timelines\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationAnimateMetadata, AnimationGroupMetadata, AnimationKeyframesSequenceMetadata, AnimationMetadata, AnimationMetadataType, AnimationSequenceMetadata, AnimationStateMetadata, AnimationStyleMetadata, AnimationTransitionMetadata} from '@angular/animations';\n\nexport interface AnimationDslVisitor {\n  visitState(ast: AnimationStateMetadata, context: any): any;\n  visitTransition(ast: AnimationTransitionMetadata, context: any): any;\n  visitSequence(ast: AnimationSequenceMetadata, context: any): any;\n  visitGroup(ast: AnimationGroupMetadata, context: any): any;\n  visitAnimate(ast: AnimationAnimateMetadata, context: any): any;\n  visitStyle(ast: AnimationStyleMetadata, context: any): any;\n  visitKeyframeSequence(ast: AnimationKeyframesSequenceMetadata, context: any): any;\n}\n/**\n * @param {?} visitor\n * @param {?} node\n * @param {?} context\n * @return {?}\n */\nexport function visitAnimationNode(\n    visitor: AnimationDslVisitor, node: AnimationMetadata, context: any) {\n  switch (node.type) {\n    case AnimationMetadataType.State:\n      return visitor.visitState( /** @type {?} */((<AnimationStateMetadata>node)), context);\n    case AnimationMetadataType.Transition:\n      return visitor.visitTransition( /** @type {?} */((<AnimationTransitionMetadata>node)), context);\n    case AnimationMetadataType.Sequence:\n      return visitor.visitSequence( /** @type {?} */((<AnimationSequenceMetadata>node)), context);\n    case AnimationMetadataType.Group:\n      return visitor.visitGroup( /** @type {?} */((<AnimationGroupMetadata>node)), context);\n    case AnimationMetadataType.Animate:\n      return visitor.visitAnimate( /** @type {?} */((<AnimationAnimateMetadata>node)), context);\n    case AnimationMetadataType.KeyframeSequence:\n      return visitor.visitKeyframeSequence( /** @type {?} */((<AnimationKeyframesSequenceMetadata>node)), context);\n    case AnimationMetadataType.Style:\n      return visitor.visitStyle( /** @type {?} */((<AnimationStyleMetadata>node)), context);\n    default:\n      throw new Error(`Unable to resolve animation metadata node #${node.type}`);\n  }\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const ANY_STATE = '*';\nexport declare type TransitionMatcherFn = (fromState: any, toState: any) => boolean;\n/**\n * @param {?} transitionValue\n * @param {?} errors\n * @return {?}\n */\nexport function parseTransitionExpr(\n    transitionValue: string | TransitionMatcherFn, errors: string[]): TransitionMatcherFn[] {\n  const /** @type {?} */ expressions: TransitionMatcherFn[] = [];\n  if (typeof transitionValue == 'string') {\n    ( /** @type {?} */((<string>transitionValue)))\n        .split(/\\s*,\\s*/)\n        .forEach(str => parseInnerTransitionStr(str, expressions, errors));\n  } else {\n    expressions.push( /** @type {?} */((<TransitionMatcherFn>transitionValue)));\n  }\n  return expressions;\n}\n/**\n * @param {?} eventStr\n * @param {?} expressions\n * @param {?} errors\n * @return {?}\n */\nfunction parseInnerTransitionStr(\n    eventStr: string, expressions: TransitionMatcherFn[], errors: string[]) {\n  if (eventStr[0] == ':') {\n    eventStr = parseAnimationAlias(eventStr, errors);\n  }\n  const /** @type {?} */ match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n  if (match == null || match.length < 4) {\n    errors.push(`The provided transition expression \"${eventStr}\" is not supported`);\n    return expressions;\n  }\n\n  const /** @type {?} */ fromState = match[1];\n  const /** @type {?} */ separator = match[2];\n  const /** @type {?} */ toState = match[3];\n  expressions.push(makeLambdaFromStates(fromState, toState));\n\n  const /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;\n  if (separator[0] == '<' && !isFullAnyStateExpr) {\n    expressions.push(makeLambdaFromStates(toState, fromState));\n  }\n}\n/**\n * @param {?} alias\n * @param {?} errors\n * @return {?}\n */\nfunction parseAnimationAlias(alias: string, errors: string[]): string {\n  switch (alias) {\n    case ':enter':\n      return 'void => *';\n    case ':leave':\n      return '* => void';\n    default:\n      errors.push(`The transition alias value \"${alias}\" is not supported`);\n      return '* => *';\n  }\n}\n/**\n * @param {?} lhs\n * @param {?} rhs\n * @return {?}\n */\nfunction makeLambdaFromStates(lhs: string, rhs: string): TransitionMatcherFn {\n  return (fromState: any, toState: any): boolean => {\n    const /** @type {?} */ lhsMatch = lhs == ANY_STATE || lhs == fromState;\n    const /** @type {?} */ rhsMatch = rhs == ANY_STATE || rhs == toState;\n    return lhsMatch && rhsMatch;\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimateTimings, ɵStyleData} from '@angular/animations';\n\nexport const /** @type {?} */ ONE_SECOND = 1000;\n/**\n * @param {?} exp\n * @param {?} errors\n * @return {?}\n */\nexport function parseTimeExpression(exp: string | number, errors: string[]): AnimateTimings {\n  const /** @type {?} */ regex = /^([\\.\\d]+)(m?s)(?:\\s+([\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?$/i;\n  let /** @type {?} */ duration: number;\n  let /** @type {?} */ delay: number = 0;\n  let /** @type {?} */ easing: string = null;\n  if (typeof exp === 'string') {\n    const /** @type {?} */ matches = exp.match(regex);\n    if (matches === null) {\n      errors.push(`The provided timing value \"${exp}\" is invalid.`);\n      return {duration: 0, delay: 0, easing: null};\n    }\n\n    let /** @type {?} */ durationMatch = parseFloat(matches[1]);\n    const /** @type {?} */ durationUnit = matches[2];\n    if (durationUnit == 's') {\n      durationMatch *= ONE_SECOND;\n    }\n    duration = Math.floor(durationMatch);\n\n    const /** @type {?} */ delayMatch = matches[3];\n    const /** @type {?} */ delayUnit = matches[4];\n    if (delayMatch != null) {\n      let /** @type {?} */ delayVal: number = parseFloat(delayMatch);\n      if (delayUnit != null && delayUnit == 's') {\n        delayVal *= ONE_SECOND;\n      }\n      delay = Math.floor(delayVal);\n    }\n\n    const /** @type {?} */ easingVal = matches[5];\n    if (easingVal) {\n      easing = easingVal;\n    }\n  } else {\n    duration = /** @type {?} */(( <number>exp));\n  }\n\n  return {duration, delay, easing};\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nexport function normalizeStyles(styles: ɵStyleData | ɵStyleData[]): ɵStyleData {\n  const /** @type {?} */ normalizedStyles: ɵStyleData = {};\n  if (Array.isArray(styles)) {\n    styles.forEach(data => copyStyles(data, false, normalizedStyles));\n  } else {\n    copyStyles(styles, false, normalizedStyles);\n  }\n  return normalizedStyles;\n}\n/**\n * @param {?} styles\n * @param {?} readPrototype\n * @param {?=} destination\n * @return {?}\n */\nexport function copyStyles(\n    styles: ɵStyleData, readPrototype: boolean, destination: ɵStyleData = {}): ɵStyleData {\n  if (readPrototype) {\n    // we make use of a for-in loop so that the\n    // prototypically inherited properties are\n    // revealed from the backFill map\n    for (let /** @type {?} */ prop in styles) {\n      destination[prop] = styles[prop];\n    }\n  } else {\n    Object.keys(styles).forEach(prop => destination[prop] = styles[prop]);\n  }\n  return destination;\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nexport function setStyles(element: any, styles: ɵStyleData) {\n  if (element['style']) {\n    Object.keys(styles).forEach(prop => element.style[prop] = styles[prop]);\n  }\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nexport function eraseStyles(element: any, styles: ɵStyleData) {\n  if (element['style']) {\n    Object.keys(styles).forEach(prop => {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      element.style[prop] = '';\n    });\n  }\n}\n"],"names":["this","_changes","push","element","oldValue","newValue","value","triggerName","property","triggerStateStyles","_triggerStyles","fromStateStyles","DEFAULT_STATE_STYLES","listeners","_listeners","set","handleListener","listener","data","phase","eventPhase","event","makeAnimationEvent$1","onStartCallbacks","callback","onDoneCallbacks","forEach","change","_this","get","_flaggedRemovals","storageProp","DEFAULT_STATE_VALUE","Array","from","keys","listenersToKeep","filter","l","doRemove","length","fn","clear","WebAnimationsPlayer","keyframes","options","previousPlayers","_onDoneFns","_onStartFns","_onDestroyFns","_initialized","_finished","_started","_destroyed","time","_duration","_delay","previousStyles","prototype","_onFinish","init","map","styles","formattedKeyframe","Object","prop","index","_angular_animations","AUTO_STYLE","_computeStyle","undefined","previousStyleProps","missingStyleProps_1","startingKeyframe_1","hasOwnProperty","self_1","_loop_3","i","_triggerWebAnimation","onStart","onDone","onDestroy","hasStarted","_player","finish","reset","play","getPosition","currentTime","_captureStyles","_finalKeyframe","WebAnimationsDriver","animate","duration","delay","easing","playerOptions","AnimationEngine","flush","errors","timelines","currentTimeline","context","AnimationTimelineContext","fork","transformIntoNewTimeline","newTime","AnimationTimelineVisitor","buildKeyframes","ast","startingStyles","finalStyles","setStyles","visitAnimationNode","subContextCount","furthestTime","steps","s","visitAnimate","timings","parseTimeExpression","currentAnimateTimings","incrementTime","snapshotCurrentStyles","astType","type","visitKeyframeSequence","styleAst","style","newStyleData","visitStyle","MAX_KEYFRAME_OFFSET","limit","firstKeyframe","offsetGap","containsOffsets","getOffset","startTime","innerContext","createSubContext","step","innerTimeline","forwardTime","offset","TimelineBuilder","_globalTimelineStyles","_previousKeyframe","_currentEmptyStepKeyframe","hasStyling","_keyframes","size","_currentKeyframe","_backFill","val","_localTimelineStyles","copyStyles","getFinalKeyframe","defineProperty","properties","details0","_styleSummary","details1","timeline","finalKeyframes","targetKeyframe","lastKeyframe","finalKeyframe","AnimationTransitionFactory","match","currentState","nextState","AnimationValidatorVisitor","visitGroup","styleData","normalizeStyles","endTime","updateCollectedStyle","collectedEntry","totalKeyframesWithOffsets","offsets","offsetsOutOfOrder","keyframesOutOfRange","previousOffset","generatedOffset","animateDuration","durationUpToThisFrame","AnimationTrigger","name","states","_transitionAsts","transitionFactories","stateName","exprs","parseTransitionExpr","expr","sequenceErrors","validateAnimationSequence","apply","matchTransition","result","DomAnimationEngine","_driver","_normalizer","_activeTransitionAnimations","Map","_activeElementAnimations","onRemove","domFn","lookupRef","_elementTriggerStates","possibleTriggers","hasRemoval","some","instruction","setProperty","trigger","_triggers","Error","normalizeTriggerValue","listen","eventName","elementListeners","_triggerListeners","tuple","_clearPendingListenerRemovals","_pendingListenerRemovals","tuples","_onRemovalTransition","elms","querySelectorAll","MARKED_FOR_ANIMATION_SELECTOR","_loop_1","elm","activePlayers","this_1","player","destroy","activeTransitions","animateTransition","isRemovalTransition","existingPlayer","eraseStyles","fromStyles","totalTime","players","timelineInstruction","Math","max","_buildPlayer","previousPlayer","optimizeGroupPlayer","elmTransitionMap","delete","animateTimeline","instructions","_normalizeKeyframes","normalizedKeyframes","kf","normalizedKeyframe","normalizedProp","normalizedValue","normalizePropertyName","normalizeStyleValue","_queuePlayer","parent","parentNode","MARKED_FOR_REMOVAL","this_2","parentLoop","_queuedTransitionAnimations","state_1","_loop_2","leaveListeners","_queuedRemovals","flushAgain","stateDetails_1","VOID_STATE","makeAnimationEvent","NoopAnimationPlayer","_flushQueuedAnimations","Animation","buildTimelines","destinationStyles","normalizer","injector","AnimationStyleNormalizer","WebAnimationsStyleNormalizer","userProvidedProperty","normalizedProperty","unit","strVal","toString","trim","DIMENSIONAL_PROP_MAP","valAndSuffixMatch","split","NoopAnimationEngine","registerTrigger","makeStorageProp","deleteFromArrayMap","key","arr","listenOnPlayer","baseEvent","copyAnimationEvent","phaseName","makeBooleanMap","_copyKeyframeStyles","NoopAnimationDriver","normalizedAst","isArray","sequence","createTransitionInstruction","fromState","toState","toStyles","o","createTimelineInstruction","visitor","node","visitState","visitTransition","visitSequence","transitionValue","expressions","parseInnerTransitionStr","eventStr","parseAnimationAlias","alias","exp","regex","matches","durationMatch","parseFloat","durationUnit","ONE_SECOND","floor","delayMatch","delayUnit","delayVal","destination","readPrototype"],"mappings":"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"}